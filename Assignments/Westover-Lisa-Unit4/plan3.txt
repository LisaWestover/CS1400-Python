# Lisa Westover
# CS1400 7 week
# Unit4/Task3 plan3.txt

Patterns

Software Development Life Cycle


1. Requirements specification
    -use code provided, only making changes where specified
    -prompt the user to give 3 modes
        -Rectangle Pattern - A circular pattern created by drawing multiple rectangles
        -Circle Pattern - A circular pattern created by drawing multiple circles
        -Super Pattern - A random selection of some number of Rectangle and Circle Patterns

    -pattern.py must include all of these funtions
            reset() - Erase all of the patterns and start over
            setup()
            Configure turtle to draw quickly
            Configure turtle to have a window of 1000 x 800
            drawRectanglePattern()
            Use appropriate parameters
            See additional information below
            It should call drawRectangle()
            drawRectangle()
            Use appropriate parameters
            Should draw a SINGLE rectangle
            drawCirclePattern()
            Use appropriate parameters
            See additional information below
            drawSuperPattern()
            Use appropriate parameters
            Randomly draw Rectangle and Circle patterns. Each pattern should based on random values.
            Use reasonable random values (some can be negative) so patterns are drawn on the screen
            setRandomColor()
            Do not use any parameters
            Set turtle to draw in a random color
            Use at least 4 colors
            done()
            Called when user quits
            Keeps the turtle window open
     -Rectangular Pattern Specs
            The Rectangle Pattern has 6 parts to it

            Center position - This is the x, y center point of the circular pattern that is drawn
            Offset - This is the distance from the center position to the starting corner of each rectangle. It can be a positive or negative number
            Height - The height of a rectangle
            Width - The width of a rectangle
            Count - The number of rectangles to draw within the 360 degree pattern.
            Rotation - The number of degrees each rectangle is rotated in relation to the line from the Center Position to the starting corner of the rectangle
            Each individual rectangle should be a new random color. You should use at least 4 different colors.
     -Circle Pattern Specs
            Center position - This is the x, y center point of the circular pattern that is drawn
            Offset - This is the distance from the center position to starting drawing point of each circle.  It can be a positive or negative number. Note that the center point of each circle should be 'radius + offset' distance from the Center Position of the pattern.
            Radius - The radius of the circle
            Count - The number of circles to draw within the 360 degree pattern.
            Each individual circle should be a new random color. You should use at least 4 different colors.

2. System analysis
        -print menu
        - get input from user
        -call functions to draw shapes in a circular pattern to the screen
        -ask if user wants to do it again
        -ent program - thank user

3. System design
        ef reset():
    turtle.reset()
    turtle.speed(0)

# configures turtle to draw quickly
#congfigures turtle to have a 1000 x 800 window
def setup():
    turtle.speed(0)
    turtle.setup(1000,800)

#draws a single rectangle given appropriate paramenters
def drawRectanglePattern(centerX, centerY, offset, width, height, count, rotation):
    turtle.penup()
    newHeading = 0
    turtle.goto(centerX, centerY)
    for i in range(0, count + 1):
        turtle.penup()
        turtle.setheading(newHeading)
        if offset >= 0:
            turtle.forward(offset)
        else:
            turtle.backward(offset)

        drawRectangle(width, height, rotation)
        #reset the x and y to draw the shape in a new location
        turtle.penup()
        turtle.goto(centerX, centerY)
        turtle.setheading(0)
        newHeading += int(360/count)
        turtle.setheading(newHeading)
        rotation += 360/count

def drawRectangle(width, height, rotation):

    setRandomColor()
    turtle.setheading(rotation)
    turtle.pendown()
    turtle.forward(height)
    turtle.setheading(rotation + 90)
    turtle.forward(width)
    turtle.setheading(rotation + 180)
    turtle.forward(height)
    turtle.setheading(rotation + 270)
    turtle.forward(width)

# draws the circle in a circular pattern
def drawCirclePattern(centerX, centerY, offset, radius, count):
    newHeading = 0
    turtle.goto(centerX, centerY)
    turtle.circle(4)
    for i in range(int(count) + 1):
        turtle.penup()
        turtle.setheading(newHeading)
        if offset >= 0:
            turtle.penup()
            turtle.forward(offset)

        else:
            turtle.penup()
            turtle.backward(offset)

        turtle.pendown()
        setRandomColor()
        turtle.circle(radius)
        # reset the x and y to draw the shape in a new location
        turtle.penup()
        turtle.goto(centerX, centerY)
        turtle.setheading(0)
        newHeading += int(360 / count)
        turtle.setheading(newHeading)



# radomly draws Rectangle and Circle patterns, each based on reasonable random values, some negative
def drawSuperPattern(num):
    randomNum = 0
    for i in range(int(num)):
        randomNum = random.randint(1, 2)
        if randomNum == 1:
            drawRectanglePattern(5, 5, 5, 5, 5, 5, 5)
        else:
            drawCirclePattern(5, 5, 5, 5, 5)


# not using any parameters, set turtle to draw in a random color
def setRandomColor():

    num = random.randint(0, 3)
    if num == 0:
        turtle.color("red")
    elif num == 1:
        turtle.color("blue")
    elif num == 2:
        turtle.color("green")
    else:
        turtle.color("orange")

# called when user quits program, keeps turtle window open
def done():
    turtle.done()


4. Testing
   2 test cases to run to assess the program

        Case 1:
            1. Input - test the input of the variables with correct float or decimal states
            2. Expected Output - test final answers that they are also correct as a float or decimal states
            3. Report of problems and how they were fixed.  Write "Passed" if passed on first try.

        Case 2:
            1. Input - test the calculation formulas to make sure there is no logical errors
            2. Expected Output - compare answers to teachers example
            3. Report of problems and how they were fixed.  Write "Passed" if passed on first try.